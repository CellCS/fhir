<div xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.w3.org/1999/xhtml ../../schema/fhir-xhtml.xsd" xmlns="http://www.w3.org/1999/xhtml">

	[%stu-note%]
	<p> TODO </p>
	<ol>
		<li>
			<p>Updates to "Managing Subscriptions and Errors"</p>
			<ul>
				<li>Discuss error codes (Extensible Codeable Concept)</li>
				<li>Define basic error codes here</li>
				<li>Need to discuss eventCount and error detection (insert appropriate examples/workflows)</li>
			</ul>
		</li>
		<li>
			<p>Updates to "Tracking Subscription Notifications" <b>SHOULD</b> define what the AuditEvent looks like</p>
		</li>
	</ol>
	[%end-note%]

	<a name="safety"/>
	<h2>Safety and Security</h2>
	<p>
		Applications are responsible for following <a href="security.html">FHIR security guidance</a>.  Some recommendations specific to subscriptions are provided on the <a href="subscriptions.html#safety">Subscriptions Framework</a> page.
	</p>

	<a name="payloads"/>
	<h2>Payload Types</h2>
	<p>
		There are three options available when specifying the contents of a Notification: <code>empty</code>, <code>id-only</code>, and <code>full-resource</code>. These options change the level of detail conveyed in the notification <code>Bundle</code>.
	</p>
	<p>
		When deciding which payload type to request, systems SHOULD consider both ease of processing and security of PHI. To mitigate the risk of information leakage, systems SHOULD use the minimum level of detail consistent with the use case. In practice, <code>id-only</code> provides a good balance between security and performance for many real-world scenarios.
	</p>
	<p>
		If a server will not honor a payload type (e.g., will not send <code>full-resource</code> over HTTP), it SHOULD reject the Subscription request, but the server MAY accept the subscription with modificaitons.
	</p>

		<a name="payloads-empty" />
		<h3>empty</h3>
		<p>
			An example notification with an <code>empty</code> payload can be found <a href="notification-empty.html">here</a>.
		</p>
		<p>
			With the content type of <code>empty</code>, all information about the resources involved in triggering the notification is only available via channels other than the Subscription itself (e.g., the REST API). This mitigates many security concerns by both removing most PHI from the notification and allows servers to consolidate authorization and authentication logic. When the subscriber receives a notification of this type, it may query the server to fetch all the relevant resources based on the <code>SubscriptionTopic</code> and applicable filters. The client might include a <code>_since=</code> query parameter, supplying its last query timestamp to retrieve only the most recent resources. For example, if the notification is for a topic about patient admission, the subscriber will generally query for recent <code>Encounters</code> for a patient or group of patients, then fetch them as needed.
		</p>
		<p>
			When the content type is <code>empty</code>, notification bundles SHALL not contain <code>Bundle.entry</code> elements other than the <code>SubscriptionStatus</code> for the notification.
		</p>

		<a name="payloads-id-only" />
		<h3>id-only</h3>
		<p>
			An example notification with an <code>id-only</code> payload can be found <a href="notification-id-only.html">here</a>.
		</p>
		<p>
			With the content type of <code>id-only</code>, the resources involved in triggering the notification are only available through other channels (e.g., REST API), but notifications include URLs which can be used to access those resources. This allows servers to consolidate authorization and authentication logic, while removing the need for expensive queries by subscribers. When a subscriber receives a notification of this type, it may directly fetch all the relevant resources using the supplied resource ids. For example, the if the notification is for a topic about patient admission, the subscriber may fetch the <code>Encounter(s)</code> for a patient or group of patients.
		</p>
		<p>
			When the content type is <code>id-only</code>, notification bundles SHALL contain, in addition to the <code>SubscriptionStatus</code>, at least one <code>Bundle.entry</code> for each resource relevant to the notification.  For example, a notification for a topic based on <code>Encounter</code> SHALL include a reference to the <code>Encounter</code> and MAY include additional resources deemed relevant (e.g., the linked <code>Patient</code>).
		</p>
		<p>
			Each <code>Bundle.entry</code> for <code>id-only</code> notification SHALL contain a relevant resource URL in the <code>fullUrl</code>, <code>request</code>, and/or <code>response</code> elements. The Subscription's <code>notificationUrlLocation</code> element describes the behavior which should be used.
		</p>

		<a name="payloads-full-resource" />
		<h3>full-resource</h3>
		<p>
			An example notification with a <code>full-resource</code> payload can be found <a href="notification-full-resource.html">here</a>.
		</p>
		<p>
			With the content type of <code>full-resource</code>, the resources involved in triggering the notification are included in the notification bundle. When a subscriber receives a notification of this type, resources are already present in the bundle, though the subscriber may need to fetch additional resources from the server. For example, the if the notification is for a topic about patient admission, the subscriber may require related <code>Observation</code> resources.
		</p>
		<p>
			When the content type is <code>full-resource</code>, notification bundles SHALL contain, in addition to the <code>SubscriptionStatus</code>, at least one <code>Bundle.entry</code> for each resource relevant to the notification. For example, a notification for a topic based on <code>Encounter</code> SHALL include an <code>Encounter</code> and MAY include additional resources deemed relevant (e.g., the relevant <code>Patient</code>).
		</p>
		<p>
			In most scenarios, each <code>Bundle.entry</code> for a <code>full-resource</code> notification SHALL contain a relevant resource in the <code>resource</code> element. In some scenarios, it is not possible to include the resource, in which case <code>entry.request</code> and/or <code>entry.response</code> are required.  For example, in the case of a notification about a deleted resource, the server may no longer have access to the resource.  In this case, information in the <code>entry.response</code> is critical for a subscriber to process the notification (e.g., the <code>etag</code>).
		</p>

	<a name="channels"/>
	<h2>Channels</h2>
		
		<a name="rest-hook"/>
		<h3>REST Hook</h3>
		<p>
			When a Subscription is created for a REST Hook channel type, the server <b>SHALL</b> set initial status to <code>requested</code>, pending verification of the nominated endpoint URL. After a successful handshake notification has been sent and accepted, the server <b>SHALL</b> update the status to <code>active</code>. Any errors in the initial handshake <b>SHALL</b> result in the status being changed to <code>error</code>.
		</p>
		<p>
			To receive notifications via HTTP/S POST, a client should request a subscription with the channel type (<code>Subscription.channelType</code>) of <code>rest-hook</code> (from the subscription-channel-type Code System) and set the endpoint (<code>Subscription.endpoint</code>) to the appropriate client URL.  Note that this URL must be accessible by the hosting server.
		</p>
		<p>
			To convey an event notification, the server POSTs a Bundle to the client's nominated endpoint URL per the format requests in the Subscription. The content-type of the POST <b>SHALL</b> match the contentType (<code>channel.contentType</code>) requested during creation of the Subscription. Each <code>Subscription.header</code> value <b>SHALL</b> be conveyed as an HTTP request header.
		</p>

		<p>
			An example workflow for establishing a <code>rest-hook</code> subscription is included below.
		</p>
		<img src="subscription-rest-hook-flow.svg" alt="Diagram with a worflow for a Subscription using REST hooks" />
		<ol type="1">
			<li>
				Client creates a <code>Subscription</code> with the <code>channelType</code> set to <code>rest-hook</code>.
			</li>
			<li>
				Server responds with a success code and creates the subscription with a state of <code>requested</code>.
			</li>
			<li>
				Server performs an HTTP POST to the requested endpoint with a <code>handshake</code> notification.
			</li>
			<li>
				Client Endpoint accepts the POST and returns a success HTTP code (e.g., 200).
			</li>
			<li>
				Server may send a notification of type <code>heartbeat</code> at any time.
			</li>
			<li>
				Server may send a notificaiton of type <code>event-notificaiton</code> at any time.
			</li>
		</ol>

			<a name="rest-hook-security"/>
			<h4>Channel Security Notes</h4>
			<p>
				HTTP is neither a secure nor an encrypted channel.  It is strongly recommended that production implementations refuse requests to send notifications to URLs using the HTTP protocol (use HTTPS instead).
			</p>
			<p>
				HTTP does not provide endpoint verification.  It is strongly recommended that implementations refuse requests to send notifications to URLs using the HTTP protocol (use HTTPS instead).
			</p>

		<a name="websockets"/>
		<h3>WebSockets</h3>
		<p>
			While the primary interface for FHIR servers is the FHIR REST API, notifications need not occur via REST.  Indeed, some subscribers may be unable to expose an outward-facing HTTP server to receive triggered notifications.  For example, a pure client-side Web app or mobile app may want to subscribe to a data feed without polling using the /history operation. This can be accomplished using a websocket notification channel.
		</p>
		<p>
			A client can declare its intention to receive notifications via Web Sockets by requesting a subscription with the channel type (<code>Subscription.channelType</code>) of <code>websocket</code> (from the subscription-channel-type Code System).
		</p>
		<p>
			An example workflow for receiving notifications via websockets is shown below:
		</p>
		<img src="subscription-websocket-flow.svg" alt="Diagram with a worflow for a Subscription using websockets" />
		<ol type="1">
			<li>
				Client creates a <code>Subscription</code> with the <code>channelType</code> set to <code>websocket</code>.
			</li>
			<li>
				Server responds with a success code and creates the subscription.
			</li>
			<li>
				Client requests FHIR server's <a href="capabilitystatement.html">CapabilityStatement</a> to find the server's websocket URL via the <a href="extension-capabilitystatement-websocket.html">websocket extension</a>.
			</li>
			<li>
				Server returns its <a href="capabilitystatement.html">CapabilityStatement</a>.
			</li>
			<li>
				Client connects to the server via websockets (ws:// or wss://).
			</li>
			<li>
				Client requests a websocket binding token, by invoking the <a href="subscription-operation-get-ws-binding-token.html">$get-ws-binding-token</a> operation via REST.  Note: this call is intended to be repeated as necessary (e.g., prior to a token expiring, a client should request a new one).
			</li>
			<li>
				Server returns <a href="parameters.html">Parameters</a> with a <code>token</code> and an <code>expiration</code>.
			</li>
			<li>
				Client sends a <code>bind-with-token</code> message via websockets, with the token provided by the server.  Note: this operation can be repeated concurrently for multiple subscriptions, and serially for continued operation over a single websocket connection.
			</li>
			<li>
				Server sends one or more <code>handshake</code> messages via websockets (one per Subscription included in the token).  Note: some servers may additionally send one or more <code>event-notification</code> messages at this time (e.g., all messages since last connected, last 'n' messages, etc.).  Clients are expected to handle either flow.
			</li>
			<li>
				Server may send a <code>heartbeat</code> message via websockets at any time.
			</li>
			<li>
				Server may send an <code>event-notification</code> message via websockets at any time.
			</li>
			<li>
				Either the server or the client may close the websocket connection.
			</li>
		</ol>
		<p>
			Note: all notifications sent from the server <b>SHALL</b> be in the format specified by the <code>Subscription</code> it is for (e.g., <code>contentType</code> and <code>content</code> fields).
		</p>
		<p>
			[%stu-note%]
			The Websocket channel type needs more testing and feedback to ensure all requirements are met before finalizing the specification.
			[%end-note%]
		</p>
			
			<a name="websockets-security"/>
			<h4>Channel Security Notes</h4>
			<p>
				WebSocket security poses several challenges specific to the channel.  When implementing websockets for notifications, please keep in mind the following list of some areas of concern:
			</p>
			<ul>
				<li>
					Authentication of WebSockets is not generically interoperable with JWT or other 'Authentication header' protocols - WS and WSS do NOT allow for the required headers.
				</li>
				<li>
					Given client limitations on concurrent WebSocket connections (commonly 6), it is recommended that a single connection be able to authenticate to multiple Subscription resources.
				</li>
				<li>
					Unlike HTTP/S requests, WebSockets can be long-lived.  Because of this, the case of revoking access of an active connection must be considered.
				</li>
			</ul>

		<a name="email"/>
		<h3>Email</h3>
		<p>
			While the primary interface for FHIR servers is the FHIR REST API, notifications need not occur via REST.  Indeed, some subscribers may be unable to maintain an outward-facing HTTP server to receive triggered notifications.  For example, a public health organization may want to be notified of outbreaks of various illnesses.  This can be accomplished using an email notification channel.
		</p>
		<p>
			A client can declare its intention to receive notifications via Email by requesting a subscription with the channel type (<code>Subscription.channelType</code>) of <code>email</code> (from the subscription-channel-type Code System) and setting the endpoint (<code>Subscription.endpoint</code>) to the appropriate email URI (e.g., <code>mailto:public_health_notifications@example.org</code>).
		</p>
		<p>
			The server will send a new message each time a notification should be sent (e.g., per event or per batch).  The server will create a message based on the values present in the <code>Subscription.contentType</code> and <code>Subscription.content</code> fields.  If a server cannot honor the requested combination, the server should reject the Subscription request rather than send unexpected email messages.
		</p>
		<p>The email channel sets two guidelines about content:</p>
			<ul>
				<li>Message Body content <b>SHALL</b> be human readable</li>
				<li>Message Attachments <b>SHOULD</b> be machine readable</li>
			</ul>
		<p>
			Due to these guidelines, the <code>Subscription.contentType</code> refers to the content of the body of the message.  Attachment type information can be appended as a MIME parameter, for example:
		</p>
		<ul>
			<li><code>text/plain</code>: a plain-text body with no attachment</li>
			<li><code>text/html</code>: an HTML body with no attachment</li>
			<li><code>text/plain;attach=application/fhir+json</code>: a plain-text body with a FHIR JSON bundle attached</li>
			<li><code>text/html;attach=application/fhir+xml</code>: an HTML body with a FHIR XML bundle attached</li>
		</ul>
		<p>
			The <code>Subscription.content</code> field SHALL be applied to any attachments, and MAY be applied to body contents (depending on server implementation).  However, a server must not include a body which exceeds the specified content level.  For example, a server may choose to always include a standard message in the body of the message containing no PHI and vary the attachment, but cannot include PHI in the body of an email when the content is set to <code>empty</code>.
		</p>

		<p>
			An example workflow using the <code>email</code> channel type is included below.
		</p>
		<img src="subscription-email-flow.svg" alt="Diagram with a worflow for a Subscription using email" />
		<ol type="1">
			<li>
				Client creates a <code>Subscription</code> with the <code>channelType</code> set to <code>email</code>.
			</li>
			<li>
				Server responds with a success code and creates the subscription with a state of either <code>requested</code> or <code>active</code>.
			</li>
			<li>
				Optional: Server sends a email message to the requested endpoint with a <code>handshake</code> notification.  If the subscription was set to <code>requested</code>, it should be updated to <code>active</code> after successfully sending the email (pending additional steps such as user confirmation, etc.).
			</li>
			<li>
				Server may send an email for a notification of type <code>heartbeat</code> at any time.
			</li>
			<li>
				Server may send an email for a notificaiton of type <code>event-notificaiton</code> at any time.
			</li>
		</ol>

			<a name="email-security" />
			<h4>Channel Security Notes</h4>
			<p>
				Email (SMTP) is not a secure channel.  Implementers must ensure that any messages containing PHI have been secured according to their policy requirements (e.g., use of a system such as <a href="http://directproject.org/">Direct</a>).
			</p>

		<a name="messaging" />
		<h3>Messaging</h3>
		<p>
			There are times when it is desireable to use Subscriptions as a communication channel between FHIR servers.  This can be accomplished using a <code>Subscription</code> with the channel type of <code>message</code>.
		</p>
		<p>
			To receive notifications via messaging, a client should request a subscription with the channel type (<code>Subscription.channelType</code>) of <code>message</code> and set the endpoint (<code>Subscription.endpoint</code>) to the destination FHIR server base URL.  Note that this URL must be accessible by the hosting server.
		</p>
		<p>
			The FHIR server hosting the subscription (server) will send FHIR messages to the destination FHIR server (endpoint) as needed.  These messages will, as the contents of the message, have a fully-formed <code>subscription-notification</code> Bundle.  An example message can be found <a href="notification-message-id-only.xml.html">here</a>.
		</p>

		<p>
			An example workflow using the <code>message</code> channel type is included below.
		</p>
		<img src="subscription-message-flow.svg" alt="Diagram with a worflow for a Subscription using FHIR messaging" />
		<ol type="1">
			<li>
				Client creates a <code>Subscription</code> with the <code>channelType</code> set to <code>message</code>.
			</li>
			<li>
				Server responds with a success code and creates the subscription with a state of <code>requested</code>.
			</li>
			<li>
				Server sends a FHIR Message to the requested endpoint with a <code>handshake</code> notification.
			</li>
			<li>
				Client Endpoint accepts the Message and returns success.
			</li>
			<li>
				Server may send a Message containing a notification of type <code>heartbeat</code> at any time.
			</li>
			<li>
				Server may send a Message containing a notificaiton of type <code>event-notificaiton</code> at any time.
			</li>
		</ol>

		<p>
			[%stu-note%]
			The Messaging channel type needs more testing and feedback to ensure all requirements are met before finalizing the specification.
			[%end-note%]
		</p>

			<a name="message-security" />
			<h4>Channel Security Notes</h4>
			<p>
				Servers MAY require that the end-point is white-listed prior to allowing these kinds of subscriptions.  Additionally, servers MAY impose authorization/authentication requirements for server to server communication (e.g., certificate pinning, etc.). 
			</p>


	<a name="channel-extending" />
	<h2>Defining Channel Types</h2>
	<p>
		Defining a new channel type requires clear communication to implementers of both clients and servers around requirements and expectations.  Below are some areas which should be considered when creating a channel.  Anyone defining a channel type is encouraged to publish their definition at <a href="https://registry.fhir.org/">registry.fhir.org</a>.
	</p>
	[%stu-note%]
	Warning: This section is still in early drafting.
	[%end-note%]

		<a name="channel-extending-basics" />
		<h3>Channel Basics</h3>
		<p>
			At a minimum, the following items should be defined:
		</p>
		<ul>
			<li>A generally useful name for <code>Subscription.channelType</code> (e.g., 'secure-mq' isntead of 'channel0012')</li>
			<li>The type of data required in <code>Subscription.endpoint</code> (e.g., URI, etc.)</li>
			<li>The meaning of the <code>Subscription.header</code> field values (e.g., <a href="#rest-hook">REST-hook</a> defines as Auth headers included in a POST)</li>
			<li>Any variations on MIME types for <code>Subscription.contentType</code> (e.g., <a href="#email">email</a> defines this as the email body, with allowable attachments.)</li>
			<li>Whether heartbeat notifications are used (and guidance on timings if they are)</li>
		</ul>
		
		<a name="channel-extending-security" />
		<h3>Channel Security Considerations</h3>
		<ul>
			<li>Defining a channel has security implications.</li>
			<li>If the channel CANNOT be secured, that should be stated with a warning not to transfer PHI.</li>
			<li>If the channel is/can be scured, guidance should be given on how configurations relate to PHI safety:
				<ul>
					<li>Does the channel determine the legitimacy of both endpoints?</li>
					<li>Is the channel secure for third-party monitoring?</li>
					<li>...</li>
				</ul>
			</li>
		</ul>

	<a name="errors"/>
	<h2>Managing Subscriptions and Errors</h2>
	<p>
		The subscription resource is authored by the client with an initial status of <code>requested</code>. A new subscription is created on the server using the RESTful create or update interaction. After a successful transaction, the client parses the Location header and saves the new Subscription's logical id for use in subsequent operations.
	</p>
	<p>
		When the server receives a subscription, it <b>SHOULD</b> check that it is prepared to accept/process the subscription. If it is, it sets the subscription to <code>requested</code> and process it like a normal <a href="http.html#create">create</a>. If it isn't, it <b>SHOULD</b> return an error with an <a href="operationoutcome.html">OperationOutcome</a> instead of processing the <code>create</code>.
	</p>
	<p>
		The criteria are subject to the same limitations as the client that created it, such as access to patient compartments etc. Note that the subscription MAY remain active after the client access tokens expire.
	</p>
	<p>
		Once the server has activated the subscription, it sets the status to <code>active</code> (note: the server may do this as it accepts the resource if it wants).
	</p>
	<p>
		An appropriately authorized client can use search and/or history operations to see what subscriptions are currently active on the server. Once the subscription is no longer desired, the client deletes the subscription from the server.
	</p>
	<p>
		The server may retry the notification a fixed number of times and/or refer errors to its own alert logs. If the notification fails, the server <b>SHOULD</b> set the status to <code>error</code> and mark the error in the resource. If the notification succeeds, the server <b>SHOULD</b> update the status to <code>active</code> and may remove any error codes. If a subscription fails consistently a server may choose set the subscription status to <code>off</code> and stop trying to send notifications.
	</p>
	<p>
		Errors a server wishes to make accessible to clients are stored in <code>Subscription.error</code>. Servers should provide a mechanism for clearing errors (e.g., when resetting a <code>Subscription.status</code> back to <code>requested</code> after an error). Since <code>Subscription.error</code> represents server errors, a server <b>SHOULD NOT</b> allow clients to add errors.
	</p>

	<a name="tracking"/>
	<h2>Tracking Subscription Notifications</h2>
	<p>
		Servers implementing Subscriptions are responsible for complying with their policies on information logging.  Servers are encouraged to track all sent notifications, for example with the use of <a href="auditevent.html">AuditEvent</a> or <a href="communication.html">Communication</a> resources.
	</p>
</div>
